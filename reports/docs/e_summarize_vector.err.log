Traceback (most recent call last):
  File "/home/mmann1123/miniconda3/envs/pygis/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/mmann1123/miniconda3/envs/pygis/lib/python3.11/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/mmann1123/miniconda3/envs/pygis/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/mmann1123/miniconda3/envs/pygis/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/mmann1123/miniconda3/envs/pygis/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/mmann1123/miniconda3/envs/pygis/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/mmann1123/miniconda3/envs/pygis/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Perform spatial join, merging attribute table of wells point and that of the cell with which it intersects
# op = "intersects" also counts those that fall on a cell boundary (between two cells)
# op = "within" will not count those fall on a cell boundary
wells_cell = gpd.sjoin(wells, bay_area_grid, how = "inner", op = "intersects")

# Remove duplicate counts
# With intersect, those that fall on a boundary will be allocated to all cells that share that boundary
wells_cell = wells_cell.drop_duplicates(subset = ['Well_ID']).reset_index(drop = True)

# Set field name to hold count value
count_field = "Count"

# Add a field with constant value of 1
wells_cell[count_field] = 1

# Group GeoDataFrame by cell while aggregating the Count values
wells_cell = wells_cell.groupby('Grid_ID').agg({count_field:'sum'})

# Merge the resulting grouped dataframe with the grid GeoDataFrame, using a left join to keep all cell polygons
bay_area_grid = bay_area_grid.merge(wells_cell, on = 'Grid_ID', how = "left")

# Fill the NaN values (cells without any points) with 0
bay_area_grid[count_field] = bay_area_grid[count_field].fillna(0)

# Convert Count field to integer
bay_area_grid[count_field] = bay_area_grid[count_field].astype(int)

# Display grid attribute table
display(bay_area_grid)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[6], line 4[0m
[1;32m      1[0m [38;5;66;03m# Perform spatial join, merging attribute table of wells point and that of the cell with which it intersects[39;00m
[1;32m      2[0m [38;5;66;03m# op = "intersects" also counts those that fall on a cell boundary (between two cells)[39;00m
[1;32m      3[0m [38;5;66;03m# op = "within" will not count those fall on a cell boundary[39;00m
[0;32m----> 4[0m wells_cell [38;5;241m=[39m [43mgpd[49m[38;5;241;43m.[39;49m[43msjoin[49m[43m([49m[43mwells[49m[43m,[49m[43m [49m[43mbay_area_grid[49m[43m,[49m[43m [49m[43mhow[49m[43m [49m[38;5;241;43m=[39;49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43minner[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mop[49m[43m [49m[38;5;241;43m=[39;49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mintersects[39;49m[38;5;124;43m"[39;49m[43m)[49m
[1;32m      6[0m [38;5;66;03m# Remove duplicate counts[39;00m
[1;32m      7[0m [38;5;66;03m# With intersect, those that fall on a boundary will be allocated to all cells that share that boundary[39;00m
[1;32m      8[0m wells_cell [38;5;241m=[39m wells_cell[38;5;241m.[39mdrop_duplicates(subset [38;5;241m=[39m [[38;5;124m'[39m[38;5;124mWell_ID[39m[38;5;124m'[39m])[38;5;241m.[39mreset_index(drop [38;5;241m=[39m [38;5;28;01mTrue[39;00m)

File [0;32m~/miniconda3/envs/pygis/lib/python3.11/site-packages/geopandas/tools/sjoin.py:110[0m, in [0;36msjoin[0;34m(left_df, right_df, how, predicate, lsuffix, rsuffix, distance, on_attribute, **kwargs)[0m
[1;32m    108[0m [38;5;28;01mif[39;00m kwargs:
[1;32m    109[0m     first [38;5;241m=[39m [38;5;28mnext[39m([38;5;28miter[39m(kwargs[38;5;241m.[39mkeys()))
[0;32m--> 110[0m     [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;124msjoin() got an unexpected keyword argument [39m[38;5;124m'[39m[38;5;132;01m{[39;00mfirst[38;5;132;01m}[39;00m[38;5;124m'[39m[38;5;124m"[39m)
[1;32m    112[0m on_attribute [38;5;241m=[39m _maybe_make_list(on_attribute)
[1;32m    114[0m _basic_checks(left_df, right_df, how, lsuffix, rsuffix, on_attribute[38;5;241m=[39mon_attribute),

[0;31mTypeError[0m: sjoin() got an unexpected keyword argument 'op'

